#!/bin/bash

#
# check_vpn - a nagios plugin to check VPN status
# Copyright (C) 2013 Dan Fruehauf <malkoadan@gmail.com>
# Copyright (C) 2012 Lacoon Security <lacoon.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#

# test in front of google.com
declare -r DEFAULT_TEST_URL=http://www.google.com

# check_vpn lock, for preventing multiple access to resources
CHECK_VPN_LOCK=/var/run/check_vpn

# global error string to report errors
ERROR_STRING=""

# returns a free vpn device
# $1 - device prefix (tun/tap/ppp)
allocate_vpn_device() {
	local device_prefix=$1; shift
	local i
	for i in `seq 0 255`; do
		! ifconfig ${device_prefix}$i >& /dev/null && \
			echo "${device_prefix}$i" && \
			return 0
	done
	return 1
}

# returns 0 if this is a specific device (i.e. tun0) or 1 if not. for instance
# 'tun', 'tap' or 'ppp' are not speficic devices, but 'tun10', 'tap43' or
# 'ppp51' are
# $1 - device
is_specific_device() {
	local device=$1; shift
	echo $device | grep -q -o '\(tun\|tap\|ppp\|dns\)[[:digit:]]\+$'
}

# emits critical error and quits if not running as root
check_root() {
	if [ `id -u` -ne 0 ]; then
		echo "Critical: check_vpn must be run as root"
		exit 2
	fi
}

################################
# CORE check_vpn FUNCTIONALITY #
################################

# locks and prevents from multiple access
lock_check_vpn() {
	local -i i=0
	while [ $i -lt 30 ]; do
		mkdir $CHECK_VPN_LOCK >& /dev/null && \
			trap "{ rmdir $CHECK_VPN_LOCK; echo 'Critical: Aborted.'; exit 2; }" INT && \
			return 0
		sleep 1
		let i=$i+1
	done
	echo "Critical: Couldn't obtain exclusive check_vpn lock '$CHECK_VPN_LOCK'"
	exit 2
}

# unlocks lock
unlock_check_vpn() {
	rmdir $CHECK_VPN_LOCK
}

# return true if vpn is up, false if it hadn't
# $1 - type
# $2 - lns
# $3 - vpn device
wait_for_vpn_to_come_up() {
	local type=$1; shift
	local lns=$1; shift
	local vpn_device=$1; shift
	for i in `seq 1 30`; do
		sleep 1
		if _${type}_is_vpn_up $lns $vpn_device; then
			return 0
		fi
	done
	return 1
}

# return true if vpn is down, false if it hadn't
# $1 - type
# $2 - lns
# $3 - vpn device
wait_for_vpn_to_come_down() {
	local type=$1; shift
	local lns=$1; shift
	local vpn_device=$1; shift
	for i in `seq 1 30`; do
		sleep 1
		if ! _${type}_is_vpn_up $lns $vpn_device; then
			return 0
		fi
	done
	return 1
}

# checks if a port is open
# $1 - host
# $2 - port
check_open_port() {
	local host=$1; shift
	local -i port=$1; shift
	echo -n | nc -w 5 $host $port >& /dev/null
}

# returns routing table number for device
# $1 - device
get_routing_table_for_device() {
	local device=$1; shift
	local device_prefix=${device:0:3}
	local -i device_nr=`echo $device | sed -e 's/^[a-z]\+//g'`

	local -i device_nr_base=5000
	case "$device_prefix" in
		tap) device_nr_base=2000;;
		tun) device_nr_base=3000;;
		ppp) device_nr_base=4000;;
		dns) device_nr_base=5000;;
		*) device_nr_base=6000;;
	esac

	local -i table_nr=`expr $device_nr_base + $device_nr`
	echo $table_nr
}

# add/remove source based routing for given device
# $1 - device
# $2 - action (up/down)
source_based_routing() {
	local device=$1; shift
	local action=$1; shift

	# extract table number, local and remote addressess
	local -i table_nr=`get_routing_table_for_device $device`
	local interface_remote_address=`ip addr show $device | grep "\binet\b" | cut -d' ' -f8 | cut -d/ -f1`
	local interface_local_address=`ip addr show $device | grep "\binet\b" | cut -d' ' -f6`

	# TODO should somehow probe remote address, as tap devices
	# will not work without the remote address being set as gateways
	local via_argument="dev $device"
	[ x"$REMOTE_GW" != x ] && via_argument="via $REMOTE_GW"

	# act on action
	if [ "$action" = "up" ]; then
		route add $interface_remote_address dev $device >& /dev/null
		ip rule add from $interface_local_address table $table_nr >& /dev/null
		ip route add default $via_argument table $table_nr
	elif [ "$action" = "down" ]; then
		ip rule delete from $interface_local_address table $table_nr >& /dev/null
		ip route delete table $routing_table_number >& /dev/null
	else
		ERROR_STRING="source_based_routing: action required" && return 2
	fi
}

# run connectivity check
# $1 - device
# $2 - test url
vpn_connectivity_check() {
	local device=$1; shift
	local test_url=$1; shift
	# add source based routing for device
	source_based_routing $device up

	# perform test
	curl \
		--interface $device  \
		--connect-timeout 10 \
		--speed-time 5       \
		-w "time=%{time_connect}s;size=%{size_download}B" \
		-s -o /dev/null $test_url
	local -i retval=$?

	# remove routing
	source_based_routing $device down

	return $retval
}

# prints usage and exits
usage() {
	echo "Usage: $0 -t VPN_TYPE -H HOSTNAME -u USERNAME -p PASSWORD [OPTIONS]... -- extra_arguments"
	echo "Tests a VPN connection."
	echo "Extra arguments can be specified after --, please refer to the plugin"
	echo "you're using to understand what options can be passed"
	echo
	echo "
Options:
  -t, --type                 VPN type, one of: l2tp, openvpn, pptp, ssh.
  -h, --hostname             Hostname to connect to.
  -u, --username             Username to use with VPN.
  -p, --password             Password to use with VPN.
  -l, --lock                 Use global lock to avoid running check_vpn more
                             then once at the same time.
  -d, --device               Device to use, can be a specific device (tunX,
                             tapX, pppX) or just a prefix (tun, tap, ppp).
  -U, --url                  URL to test connectivity with, the default is
                             http://www.google.com"
	exit 2
}

# main
main() {
	# lets get into business with getopt
	local tmp_getops=`getopt -o hlt:H:u:p:d:U: --long help,lock,type:,host:,username:,password:,device:,url: -- "$@"`
	[ $? != 0 ] && usage
	eval set -- "$tmp_getops"

	# business time!!
	local lock type lns username password device test_url
	while true ; do
		case "$1" in
			-h|--help) usage;;
			-l|--lock) lock=yes; shift 1;;
			-t|--type) type=$2; shift 2;;
			-H|--host) lns="$2"; shift 2;;
			-u|--username) username="$2"; shift 2;;
			-p|--password) password="$2"; shift 2;;
			-d|--device) device="$2"; shift 2;;
			-U|--url) test_url="$2"; shift 2;;
			--) shift; break;;
			*) usage;;
		esac
	done
	[ x"$type" = x ] && usage
	[ x"$username" = x ] && usage
	[ x"$password" = x ] && usage
	[ x"$test_url" = x ] && test_url=$DEFAULT_TEST_URL

	# must run as root
	check_root

	# source plugin
	source `dirname $0`/check_vpn_plugins/$type.sh || usage

	# locks and prevents multiple access
	[ x"$lock" = x"yes" ] && lock_check_vpn

	# allocate device if user did not supply a specific one
	if ! is_specific_device $device; then
		device=`_${type}_allocate_vpn_device "$device"`
	fi

	local -i retval=0

	# destroy any running VPN connections to this lns
	_${type}_stop_vpn $lns $device

	# start vpn
	_${type}_start_vpn $lns $username $password $device "$@"
	if [ $? -eq 0 ] && wait_for_vpn_to_come_up $type $lns $device; then
		local tmp_perf_data=`mktemp`
		if vpn_connectivity_check $device $test_url > $tmp_perf_data; then
			echo "OK: VPN to '$lns' up and running on '$device', '$test_url' reachable|"`cat $tmp_perf_data`
		else
			echo "Warning: VPN ($type) up, connectivity check failed to '$test_url'|"`cat $tmp_perf_data`
			retval=1
		fi
		rm -f $tmp_perf_data
	else
		echo "Critical: VPN ($type) connection failed to '$lns': '$ERROR_STRING'"
		retval=2
	fi
	_${type}_stop_vpn $lns $device
	wait_for_vpn_to_come_down $type $lns $device
	# go back to previous directory
	rm -rf --preserve-root $tmp_vpn_dir
	[ x"$lock" = x"yes" ] && unlock_check_vpn
	return $retval
}

# don't run main if running shunit
if [[ `basename $0` =~ ^shunit2_.* ]]; then
	true
else
	main "$@"
fi
